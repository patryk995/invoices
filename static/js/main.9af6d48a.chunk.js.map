{"version":3,"sources":["sanidentas_logo.jpeg","types.ts","helpers.ts","components/InvoicePage.tsx","components/OrderPage.tsx","components/MainForm.tsx","components/CalendarModal.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","FVEnum","monthWords","dateToWords","date","getFullYear","getMonth","format","InvoicePage","invoice","fV","style","height","padding","display","justifyContent","flexDirection","src","sanidentasLogo","width","alt","alignItems","fontWeight","fontSize","marginBottom","Invoice1","Invoice2","fontStyle","textAlign","Name","PersonalCode","Address","margin","Eur","Ct","colSpan","borderBottom","borderLeft","PriceInWords","flex","this","props","formValues","pages","pagesNumber","Array","fill","console","log","map","Component","OrderPage","order","Order1","Order2","MainForm","toggleCalendar","invoiceRef","useRef","doubleInvoiceRef","orderRef","useState","initialNumberObject","savedNumbersObject","retrievedObject","localStorage","getItem","JSON","parse","getLocal","setFormValue","setValue","e","data","name","value","useEffect","docNumbers","setItem","stringify","priceNumber","words","eurWord","decimalNumberWord","decimalNumber","lastNumber","lastNumberWord","hundredNumberWord","hundredNumber","hundredNumberFirstPosition","tenThousandNumberWord","tenThousandNumber","tenThousandNumberFirstPosition","tempThousandNumber","thousandNumberWord","thousandNumber","thousandNumberFirstPosition","priceToWordsHelper","Number","incrementInvoice","className","Form","Input","icon","placeholder","label","id","readOnly","onClick","Group","Field","type","invoice1","onChange","invoice2","order1","order2","widths","personalCode","address","Boolean","eurInWords","onAfterPrint","trigger","Button","primary","content","current","ref","CalendarModal","setDate","locale","selectRange","newDate","isArray","length","Date","App","isCalendarModalVisible","setCalendarModalVisible","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9af6d48a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sanidentas_logo.abf16b97.jpeg\";","export enum FVEnum {\n    Invoice1 = \"invoice1\",\n    Invoice2 = \"invoice2\",\n\n    Order1 = \"order1\",\n    Order2 = \"order2\",\n\n    Eur = \"eur\",\n    Ct = \"ct\",\n    PriceInWords = \"eurInWords\",\n\n    Name = \"name\",\n    PersonalCode = \"personalCode\",\n    Address = \"address\"\n}\n","import { format } from \"date-fns\";\n\nexport const setLocal = (docNumbers: any) => {\n    // Put the object into storage\n    localStorage.setItem(\"docNumbers\", JSON.stringify(docNumbers));\n};\nexport const getLocal = () => {\n    // Retrieve the object from storage\n    var retrievedObject = localStorage.getItem(\"docNumbers\");\n    if (retrievedObject) {\n        return JSON.parse(retrievedObject);\n    }\n    return null;\n};\nexport const monthWords = [\n    \"sausio\",\n    \"vasario\",\n    \"kovo\",\n    \"balandžio\",\n    \"gegužės\",\n    \"birželio\",\n    \"liepos\",\n    \"rugpjūčio\",\n    \"rugsėjo\",\n    \"spalio\",\n    \"lapkričio\",\n    \"gruodžio\"\n];\nexport const dateToWords = (date: Date) => {\n    return `${date.getFullYear()} m. ${monthWords[date.getMonth()]} ${format(\n        date,\n        \"dd\"\n    )} d.`;\n};\nexport const priceToWordsHelper = (priceNumber: number): string => {\n    var words = [];\n    words[0] = \"\";\n    words[1] = \"vienas \";\n    words[2] = \"du \";\n    words[3] = \"trys \";\n    words[4] = \"keturi \";\n    words[5] = \"penki \";\n    words[6] = \"šeši \";\n    words[7] = \"septyni \";\n    words[8] = \"aštuoni \";\n    words[9] = \"devyni \";\n    words[10] = \"dešimt \";\n    words[11] = \"vienuolika \";\n    words[12] = \"dvylika \";\n    words[13] = \"trylika \";\n    words[14] = \"keturiuolika \";\n    words[15] = \"penkiolika \";\n    words[16] = \"šešiolika \";\n    words[17] = \"septyniolika \";\n    words[18] = \"aštuoniolika \";\n    words[19] = \"devyniolika \";\n    words[20] = \"dvidešimt \";\n    words[30] = \"trisdešimt \";\n    words[40] = \"keturiasdešimt \";\n    words[50] = \"penkiasdešimt \";\n    words[60] = \"šešiasdešimt \";\n    words[70] = \"septyniasdešimt \";\n    words[80] = \"aštuoniasdešimt \";\n    words[90] = \"devyniasdešimt \";\n    words[100] = \"šimtas \";\n    words[101] = \"šimtai \";\n    words[1000] = \"tūkstantis \";\n    words[1001] = \"tūkstančiai \";\n    words[10000] = \"tūkstančių \";\n\n    let priceInWords = \"\";\n    const eurWord = priceNumber\n        ? priceNumber % 10 === 1 && priceNumber % 100 !== 11\n            ? \"euras\"\n            : priceNumber % 10 !== 0 &&\n              (priceNumber % 100 < 10 || priceNumber % 100 > 20)\n            ? \"eurai\"\n            : \"eurų\"\n        : \"\";\n    let decimalNumberWord = \"\";\n    const decimalNumber = priceNumber % 100;\n\n    if (decimalNumber) {\n        if (decimalNumber >= 10 && decimalNumber <= 20) {\n            decimalNumberWord = words[decimalNumber];\n            priceNumber -= decimalNumber;\n        } else {\n            decimalNumberWord = words[decimalNumber - (decimalNumber % 10)];\n            priceNumber = priceNumber - decimalNumber + (decimalNumber % 10);\n        }\n    }\n\n    const lastNumber = priceNumber % 10;\n    let lastNumberWord = \"\";\n\n    if (lastNumber) {\n        lastNumberWord = words[priceNumber % 10];\n        priceNumber -= lastNumber;\n    }\n\n    let hundredNumberWord = \"\";\n    const hundredNumber = priceNumber % 1000;\n\n    if (hundredNumber) {\n        const hundredNumberFirstPosition = hundredNumber / 100;\n        if (hundredNumberFirstPosition === 1) {\n            hundredNumberWord = words[100];\n        } else {\n            hundredNumberWord = words[hundredNumberFirstPosition] + words[101];\n        }\n        priceNumber -= hundredNumber;\n    }\n\n    let tenThousandNumberWord = \"\";\n    const tenThousandNumber = priceNumber % 100000;\n\n    if (tenThousandNumber >= 10000) {\n        const tenThousandNumberFirstPosition = tenThousandNumber / 1000;\n        if (\n            tenThousandNumberFirstPosition >= 10 &&\n            tenThousandNumberFirstPosition <= 20\n        ) {\n            tenThousandNumberWord =\n                words[tenThousandNumberFirstPosition] + words[10000];\n            priceNumber -= tenThousandNumber;\n        } else {\n            const tempThousandNumber = (priceNumber % 10000) / 1000;\n            tenThousandNumberWord =\n                words[tenThousandNumberFirstPosition - tempThousandNumber];\n            if (!tempThousandNumber) {\n                tenThousandNumberWord += words[10000];\n            }\n            priceNumber =\n                priceNumber - tenThousandNumber + (priceNumber % 10000);\n        }\n    }\n    let thousandNumberWord = \"\";\n    const thousandNumber = priceNumber % 10000;\n\n    if (thousandNumber) {\n        const thousandNumberFirstPosition = thousandNumber / 1000;\n        if (thousandNumberFirstPosition === 1) {\n            if (tenThousandNumberWord) {\n                thousandNumberWord =\n                    words[thousandNumberFirstPosition] + words[1000];\n            } else {\n                thousandNumberWord = words[1000];\n            }\n        } else {\n            thousandNumberWord =\n                words[thousandNumberFirstPosition] + words[1001];\n        }\n        priceNumber -= thousandNumber;\n    }\n    priceInWords =\n        tenThousandNumberWord +\n        thousandNumberWord +\n        hundredNumberWord +\n        decimalNumberWord +\n        lastNumberWord +\n        eurWord;\n\n    return priceInWords;\n};\n","import React, { Component } from \"react\";\nimport { FVEnum } from \"../types\";\nimport { dateToWords } from \"../helpers\";\nimport sanidentasLogo from \"../sanidentas_logo.jpeg\";\ninterface IProps {\n    formValues: {\n        [FVEnum.Order1]: number;\n        [FVEnum.Order2]: number;\n        [FVEnum.Invoice1]: number;\n        [FVEnum.Invoice2]: number;\n        [FVEnum.Eur]: string | null;\n        [FVEnum.Ct]: string | null;\n        [FVEnum.PriceInWords]: string;\n\n        [FVEnum.Name]: string;\n        [FVEnum.PersonalCode]: string | null;\n        [FVEnum.Address]: string;\n    };\n    date: Date;\n    pages: number;\n}\nexport class InvoicePage extends Component<IProps> {\n    render() {\n        const { formValues: fV, date, pages } = this.props;\n        const pagesNumber = new Array(pages).fill(0);\n        console.log(pagesNumber);\n        return <>{pagesNumber.map(() => this.invoice(fV, date))}</>;\n    }\n    invoice = (fV: any, date: Date) => (\n        <div\n            style={{\n                height: \"100vh\",\n                padding: \"50px\",\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                flexDirection: \"column\"\n            }}\n        >\n            <div>\n                <img\n                    src={sanidentasLogo}\n                    style={{ width: 250 }}\n                    alt=\"sanidentas\"\n                />\n                <div\n                    style={{\n                        width: \"100%\",\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        alignItems: \"center\"\n                    }}\n                >\n                    <div\n                        style={{\n                            fontWeight: \"bold\",\n                            fontSize: 18,\n                            marginBottom: 10\n                        }}\n                    >\n                        SĄSKAITA FAKTŪRA\n                    </div>\n                    <div style={{ padding: \"5px 0\" }}>\n                        Serija SDS Nr. {fV[FVEnum.Invoice1]}-\n                        {fV[FVEnum.Invoice2]}\n                    </div>\n                    <div style={{ padding: \"5px 0\" }}>{dateToWords(date)}</div>\n                    <div style={{ padding: \"5px 0\" }}>Vilnius</div>\n                </div>\n                <div style={{ padding: \"5px 0\", fontWeight: \"bold\" }}>\n                    Paslaugų teikėjas:\n                </div>\n                <div style={{ padding: \"5px 0\" }}>\n                    UAB \"Sanidentas\" įmonės kodas 3000994735\n                </div>\n                <div style={{ padding: \"5px 0\" }}>\n                    Duomenys kaupiami ir saugomi Juridinių asmenų registre\n                </div>\n                <div style={{ padding: \"5px 0\" }}>\n                    Karaliaučiaus g. 2-58, LT-06281 Vilnius\n                </div>\n                <div style={{ padding: \"5px 0\" }}>Tel. +370 671 02370</div>\n                <div style={{ padding: \"5px 0\" }}>\n                    El. p. info@sanidentas.lt www.sanidentas.lt\n                </div>\n                <div style={{ padding: \"5px 0\" }}>\n                    A. s. LT19 4010 0495 0122 7931 AB DNB banke, kodas 40100\n                </div>\n                <div\n                    style={{\n                        fontStyle: \"italic\",\n                        fontWeight: \"bold\",\n                        textAlign: \"center\",\n                        padding: \"20px 0\"\n                    }}\n                >\n                    DĖMESIO, PASIKEITĖ BANKO SĄSKAITOS REKVIZITAI!\n                </div>\n\n                <div style={{ fontWeight: \"bold\" }}>Paslaugų pirkėjas:</div>\n                <div style={{ padding: \"5px 0\" }}>{fV[FVEnum.Name]}</div>\n                <div style={{ padding: \"5px 0\" }}>\n                    Asmens (įmonės) kodas: {fV[FVEnum.PersonalCode]}\n                </div>\n                <div style={{ padding: \"5px 0\" }}>\n                    Adresas: {fV[FVEnum.Address]}\n                </div>\n\n                <table style={{ width: \"100%\", margin: \"5px auto\" }}>\n                    <thead style={{ fontWeight: 700 }}>\n                        <tr>\n                            <th>Paslaugos pavadinimas</th>\n                            <th style={{ textAlign: \"center\" }}>Kiekis</th>\n                            <th style={{ textAlign: \"center\" }}>Kaina, EUR</th>\n                            <th style={{ textAlign: \"center\" }}>Suma, EUR</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>dantų gydymas</td>\n                            <td style={{ textAlign: \"center\" }}>1</td>\n                            <td style={{ textAlign: \"center\" }}>\n                                {fV[FVEnum.Eur]}.\n                                {fV[FVEnum.Ct] ? fV[FVEnum.Ct] : \"00\"}\n                            </td>\n                            <td style={{ textAlign: \"center\" }}>\n                                {fV[FVEnum.Eur]}.\n                                {fV[FVEnum.Ct] ? fV[FVEnum.Ct] : \"00\"}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td\n                                colSpan={3}\n                                style={{\n                                    borderBottom: \"transparent\",\n                                    borderLeft: \"transparent\",\n                                    textAlign: \"right\",\n                                    fontWeight: \"bold\"\n                                }}\n                            >\n                                Iš viso EUR:\n                            </td>\n                            <td\n                                style={{\n                                    fontWeight: \"bold\",\n                                    textAlign: \"center\"\n                                }}\n                            >\n                                {fV[FVEnum.Eur]}.\n                                {fV[FVEnum.Ct] ? fV[FVEnum.Ct] : \"00\"}\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n                <div style={{ padding: \"5px 0\" }}>\n                    Suma žodžiais: {fV[FVEnum.PriceInWords]}.\n                </div>\n                <div style={{ display: \"flex\", padding: \"20px 0\" }}>\n                    <span>Sąskaita išrašė </span>\n                    <div style={{ flex: 1, borderBottom: \"1px solid\" }} />\n                </div>\n                <div style={{ display: \"flex\", padding: \"20px 0\" }}>\n                    <span>Sąskaita už suteiktas paslaugas gavau </span>\n                    <div style={{ flex: 1, borderBottom: \"1px solid\" }} />\n                </div>\n            </div>\n            <div\n                style={{\n                    display: \"flex\",\n                    justifyContent: \"space-between\",\n                    fontSize: 10\n                }}\n            >\n                <div style={{ padding: \"5px 0\" }}>UAB \"SANIDENTAS\"</div>\n                <div style={{ padding: \"5px 0\" }}>ODONTOLOGIJOS KLINIKA</div>\n            </div>\n        </div>\n    );\n}\n\nexport default InvoicePage;\n","import React, { Component } from \"react\";\nimport { FVEnum } from \"../types\";\nimport { format } from \"date-fns\";\nimport { dateToWords } from \"../helpers\";\ninterface IProps {\n    formValues: {\n        [FVEnum.Order1]: number;\n        [FVEnum.Order2]: number;\n        [FVEnum.Invoice1]: number;\n        [FVEnum.Invoice2]: number;\n        [FVEnum.Eur]: string | null;\n        [FVEnum.Ct]: string | null;\n        [FVEnum.PriceInWords]: string;\n\n        [FVEnum.Name]: string;\n        [FVEnum.PersonalCode]: string | null;\n        [FVEnum.Address]: string;\n    };\n    date: Date;\n}\nexport class OrderPage extends Component<IProps> {\n    render() {\n        const { formValues: fV, date } = this.props;\n        return (\n            <div style={{ padding: \"50px 80px\" }}>\n                {this.order(fV, date)}\n                <div\n                    style={{\n                        width: \"100%\",\n                        borderBottom: \"1px dashed\",\n                        margin: \"60px 0 30px\"\n                    }}\n                />\n                {this.order(fV, date)}\n            </div>\n        );\n    }\n    order = (fV: any, date: Date) => (\n        <>\n            <div\n                style={{\n                    width: \"100%\",\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    textAlign: \"right\",\n                    fontSize: 12\n                }}\n            >\n                <div>UAB \"Sanidentas\"</div>\n                <div>Karaliaučiaus g. 2-58, LT-06281 Vilnius</div>\n                <div>įmonės kodas 3000994735</div>\n                <div>A/S LT19 4010 0495 0122 7931</div>\n            </div>\n\n            <div\n                style={{\n                    width: \"100%\",\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"center\",\n                    margin: \"15px 0\"\n                }}\n            >\n                <div style={{ fontSize: 15 }}>\n                    KASOS PAJAMŲ ORDERIS Serija SD Nr. {fV[FVEnum.Order1]}-\n                    {fV[FVEnum.Order2]}\n                </div>\n                <div style={{ padding: \"5px 0\" }}>{dateToWords(date)}</div>\n            </div>\n            <div style={{ padding: \"5px 0\" }}>Mokėtojas: {fV[FVEnum.Name]}</div>\n            <div style={{ padding: \"5px 0\" }}>\n                Asmens (įmonės) kodas: {fV[FVEnum.PersonalCode]}\n            </div>\n            <div style={{ padding: \"5px 0\" }}>\n                Adresas: {fV[FVEnum.Address]}\n            </div>\n            <div style={{ padding: \"20px 0\" }}>\n                Operacijos turinys: dantų gydymas\n            </div>\n            <div style={{ padding: \"5px 0\" }}>\n                Suma: {fV[FVEnum.Eur]} {fV[FVEnum.Ct] ? fV[FVEnum.Ct] : \"00\"}\n            </div>\n            <div style={{ padding: \"5px 0\" }}>\n                Suma žodžiais:{\" \"}\n                <span style={{ fontStyle: \"italic\" }}>\n                    {fV[FVEnum.PriceInWords]}.\n                </span>\n            </div>\n            <div style={{ display: \"flex\", padding: \"15px 0\" }}>\n                <span>Vyr. Buhalteris (buhalteris)</span>\n                <div style={{ flex: 1, borderBottom: \"1px solid\" }} />\n            </div>\n            <div style={{ display: \"flex\", padding: \"15px 0\" }}>\n                <span>Gavo</span>\n                <div style={{ flex: 1, borderBottom: \"1px solid\" }} />\n            </div>\n        </>\n    );\n}\n\nexport default OrderPage;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { format } from \"date-fns\";\nimport ReactToPrint from \"react-to-print\";\nimport InvoicePage from \"./InvoicePage\";\nimport { Form, Input, Button } from \"semantic-ui-react\";\nimport { priceToWordsHelper, getLocal, setLocal } from \"../helpers\";\nimport { FVEnum } from \"../types\";\nimport OrderPage from \"./OrderPage\";\n\ninterface IProps {\n    date: Date;\n    toggleCalendar(): void;\n}\n\nexport const MainForm = ({ date, toggleCalendar }: IProps) => {\n    const invoiceRef: any = useRef(null);\n    const doubleInvoiceRef: any = useRef(null);\n    const orderRef: any = useRef(null);\n\n    const [formValues, setFormValue] = useState(() => {\n        const initialNumberObject = {\n            [FVEnum.Order1]: 0,\n            [FVEnum.Order2]: 0,\n            [FVEnum.Invoice1]: 0,\n            [FVEnum.Invoice2]: 0\n        };\n        const savedNumbersObject = getLocal();\n        let numbers;\n        if (savedNumbersObject) {\n            numbers = savedNumbersObject;\n        } else {\n            numbers = initialNumberObject;\n        }\n        return {\n            ...numbers,\n            [FVEnum.Eur]: null,\n            [FVEnum.Ct]: null,\n            [FVEnum.PriceInWords]: \"\",\n\n            [FVEnum.Name]: \"\",\n            [FVEnum.PersonalCode]: null,\n            [FVEnum.Address]: \"\"\n        };\n    });\n    const setValue = (e: any, data: any) => {\n        const { name, value } = data;\n        if (name) {\n            setFormValue({ ...formValues, [name]: value });\n        }\n    };\n    useEffect(() => {\n        setLocal({\n            [FVEnum.Order1]: formValues[FVEnum.Order1],\n            [FVEnum.Order2]: formValues[FVEnum.Order2],\n            [FVEnum.Invoice1]: formValues[FVEnum.Invoice1],\n            [FVEnum.Invoice2]: formValues[FVEnum.Invoice2]\n        });\n    }, [\n        formValues[FVEnum.Order1],\n        formValues[FVEnum.Order2],\n        formValues[FVEnum.Invoice1],\n        formValues[FVEnum.Invoice2]\n    ]);\n\n    useEffect(() => {\n        setFormValue({\n            ...formValues,\n            [FVEnum.PriceInWords]: `${priceToWordsHelper(\n                Number(formValues[FVEnum.Eur])\n            )} ${formValues[FVEnum.Ct] ? formValues[FVEnum.Ct] : 0} ct`\n        });\n    }, [formValues[FVEnum.Eur], formValues[FVEnum.Ct]]);\n    const incrementInvoice = () => {\n        setFormValue({\n            ...formValues,\n            [FVEnum.Invoice2]: Number(formValues[FVEnum.Invoice2]) + 1\n        });\n    };\n    const incrementOrder = () => {\n        setFormValue({\n            ...formValues,\n            [FVEnum.Order2]: Number(formValues[FVEnum.Order2]) + 1\n        });\n    };\n    console.log(orderRef);\n    return (\n        <div className=\"main-form\">\n            <Form>\n                <div className=\"form-inner\">\n                    <div className=\"form-column\">\n                        <Form.Input\n                            icon=\"calendar outline\"\n                            placeholder=\"Data\"\n                            label=\"Data\"\n                            id=\"date\"\n                            readOnly\n                            onClick={toggleCalendar}\n                            value={format(date, \"yyyy-MM-dd\")}\n                        />\n                        <Form.Group>\n                            <Form.Field width={8}>\n                                <label>Sąskaita</label>\n                                <Input\n                                    type=\"number\"\n                                    label={\"SDS\"}\n                                    name={FVEnum.Invoice1}\n                                    value={formValues.invoice1}\n                                    onChange={setValue}\n                                    placeholder=\"Sąskaita\"\n                                />\n                            </Form.Field>\n                            <Form.Field width={8}>\n                                <label></label>\n                                <Input\n                                    type=\"number\"\n                                    label=\"-\"\n                                    name={FVEnum.Invoice2}\n                                    value={formValues.invoice2}\n                                    onChange={setValue}\n                                    placeholder=\"Sąskaita\"\n                                />\n                            </Form.Field>\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Field width={8}>\n                                <label>Orderis</label>\n                                <Input\n                                    type=\"number\"\n                                    label={\"SD\"}\n                                    name={FVEnum.Order1}\n                                    value={formValues.order1}\n                                    onChange={setValue}\n                                    placeholder=\"Orderis\"\n                                />\n                            </Form.Field>\n\n                            <Form.Field width={8}>\n                                <label />\n                                <Input\n                                    label=\"-\"\n                                    type=\"number\"\n                                    name={FVEnum.Order2}\n                                    value={formValues.order2}\n                                    onChange={setValue}\n                                    placeholder=\"Orderis\"\n                                />\n                            </Form.Field>\n                        </Form.Group>\n\n                        <Form.Group widths=\"equal\">\n                            <Form.Field>\n                                <label>Suma</label>\n\n                                <Input\n                                    label=\"Eur\"\n                                    type=\"number\"\n                                    name={FVEnum.Eur}\n                                    value={formValues[FVEnum.Eur]}\n                                    onChange={setValue}\n                                    placeholder=\"Eurai\"\n                                />\n                            </Form.Field>\n\n                            <Form.Field>\n                                <label />\n                                <Input\n                                    label=\"ct\"\n                                    type=\"number\"\n                                    name={FVEnum.Ct}\n                                    value={formValues[FVEnum.Ct]}\n                                    onChange={setValue}\n                                    placeholder=\"Centai\"\n                                />\n                            </Form.Field>\n                        </Form.Group>\n                    </div>\n                    <div className=\"form-column\">\n                        <Form.Input\n                            label=\"Vardas Pavardė\"\n                            icon=\"user outline\"\n                            name={FVEnum.Name}\n                            value={formValues.name}\n                            onChange={setValue}\n                            placeholder=\"Vardas Pavardė\"\n                        />\n\n                        <Form.Input\n                            label=\"Asmens (įmonės) kodas\"\n                            icon=\"barcode\"\n                            name={FVEnum.PersonalCode}\n                            value={formValues.personalCode}\n                            onChange={setValue}\n                            placeholder=\"Asmens (įmonės) kodas\"\n                        />\n                        <Form.Input\n                            label=\"Adresas\"\n                            icon=\"home\"\n                            type=\"text\"\n                            name={FVEnum.Address}\n                            value={formValues.address}\n                            onChange={setValue}\n                            placeholder=\"Adresas\"\n                        />\n                        <Form.Input\n                            icon=\"euro sign\"\n                            label=\"Suma žodžiais\"\n                            placeholder=\"Suma žodžiais\"\n                            value={\n                                Boolean(formValues[FVEnum.Eur]) ||\n                                Boolean(formValues[FVEnum.Ct])\n                                    ? formValues.eurInWords\n                                    : \"\"\n                            }\n                        />\n                    </div>\n                </div>\n            </Form>\n\n            <div className=\"buttons-container\">\n                <ReactToPrint\n                    onAfterPrint={incrementInvoice}\n                    trigger={() => (\n                        <Button primary>Spausdinti sąskaita faktūra</Button>\n                    )}\n                    content={() => invoiceRef && invoiceRef.current}\n                />\n                <ReactToPrint\n                    onAfterPrint={incrementInvoice}\n                    trigger={() => (\n                        <Button primary>Spausdinti 2 sąskaitas faktūras</Button>\n                    )}\n                    content={() => doubleInvoiceRef && doubleInvoiceRef.current}\n                />\n                <ReactToPrint\n                    onAfterPrint={incrementOrder}\n                    trigger={() => <Button primary>Spausdinti KPO</Button>}\n                    content={() => orderRef && orderRef.current}\n                />\n            </div>\n            <div style={{ display: \"none\" }}>\n                <div ref={orderRef}>\n                    <OrderPage formValues={formValues} date={date} />\n                </div>\n                <div ref={doubleInvoiceRef}>\n                    <InvoicePage\n                        formValues={formValues}\n                        date={date}\n                        pages={2}\n                    />\n                </div>\n                <div ref={invoiceRef}>\n                    <InvoicePage\n                        formValues={formValues}\n                        date={date}\n                        pages={1}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n};\nexport default MainForm;\n","import React from \"react\";\nimport Calendar from \"react-calendar\";\ninterface IProps {\n  date: Date;\n  toggleCalendar(): void;\n  setDate: (newDate: Date) => void;\n}\nexport const CalendarModal = ({ setDate, date, toggleCalendar }: IProps) => {\n  return (\n    <div className=\"calendar-modal\">\n      <div className=\"calendar-backdrop\" onClick={toggleCalendar} />\n      <Calendar\n        className=\"calendar\"\n        locale=\"lt\"\n        selectRange={false}\n        onChange={newDate => {\n          if (Array.isArray(newDate) && newDate.length) {\n            setDate(newDate[0]);\n          } else if (newDate instanceof Date) {\n            setDate(newDate);\n          }\n        }}\n        value={date}\n      />\n    </div>\n  );\n};\n\nexport default CalendarModal;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport MainForm from \"./components/MainForm\";\nimport CalendarModal from \"./components/CalendarModal\";\n\nfunction App() {\n  const [date, setDate] = useState(new Date());\n\n  const [isCalendarModalVisible, setCalendarModalVisible] = useState(false);\n  const toggleCalendar = () => setCalendarModalVisible(!isCalendarModalVisible);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">UAB \"Sanidentas\"</header>\n      <MainForm date={date} toggleCalendar={toggleCalendar} />\n      {isCalendarModalVisible && (\n        <CalendarModal\n          setDate={setDate}\n          date={date}\n          toggleCalendar={toggleCalendar}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}