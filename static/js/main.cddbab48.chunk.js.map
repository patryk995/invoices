{"version":3,"sources":["sanidentas_logo.jpeg","Sanidentas_logotipas.svg","types.ts","helpers.ts","components/InvoicePage.tsx","components/OrderPage.tsx","components/MainForm.tsx","components/CalendarModal.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","FVEnum","monthWords","dateToWords","date","getFullYear","getMonth","format","InvoicePage","invoice","fV","style","height","padding","display","justifyContent","flexDirection","boxSizing","src","sanidentasLogo","width","alt","alignItems","fontWeight","fontSize","marginBottom","Invoice1","Invoice2","fontStyle","textAlign","Name","PersonalCode","Address","margin","Eur","Ct","colSpan","borderBottom","borderLeft","PriceInWords","flex","this","props","formValues","pages","pagesNumber","Array","fill","console","log","map","Component","OrderPage","order","Order1","Order2","MainForm","toggleCalendar","invoiceRef","useRef","doubleInvoiceRef","orderRef","useState","numbers","initialNumberObject","savedNumbersObject","retrievedObject","localStorage","getItem","JSON","parse","getLocal","setFormValue","setValue","e","target","name","value","useEffect","docNumbers","setItem","stringify","priceNumber","words","eurWord","decimalNumberWord","decimalNumber","lastNumber","lastNumberWord","hundredNumberWord","hundredNumber","hundredNumberFirstPosition","tenThousandNumberWord","tenThousandNumber","tenThousandNumberFirstPosition","tempThousandNumber","thousandNumberWord","thousandNumber","thousandNumberFirstPosition","priceToWordsHelper","Number","incrementInvoice","className","htmlFor","placeholder","id","readOnly","onClick","type","invoice1","onChange","invoice2","order1","order2","personalCode","address","Boolean","eurInWords","window","location","reload","onAfterPrint","trigger","content","current","ref","CalendarModal","setDate","locale","selectRange","newDate","isArray","length","Date","App","isCalendarModalVisible","setCalendarModalVisible","Logo","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cddbab48.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sanidentas_logo.abf16b97.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/Sanidentas_logotipas.78c623c3.svg\";","export enum FVEnum {\n    Invoice1 = \"invoice1\",\n    Invoice2 = \"invoice2\",\n\n    Order1 = \"order1\",\n    Order2 = \"order2\",\n\n    Eur = \"eur\",\n    Ct = \"ct\",\n    PriceInWords = \"eurInWords\",\n\n    Name = \"name\",\n    PersonalCode = \"personalCode\",\n    Address = \"address\"\n}\n","import format from 'date-fns/format';\n\nexport const setLocal = (docNumbers: any) => {\n    // Put the object into storage\n    localStorage.setItem('docNumbers', JSON.stringify(docNumbers));\n};\nexport const getLocal = () => {\n    // Retrieve the object from storage\n    var retrievedObject = localStorage.getItem('docNumbers');\n    if (retrievedObject) {\n        return JSON.parse(retrievedObject);\n    }\n    return null;\n};\nexport const monthWords = [\n    'sausio',\n    'vasario',\n    'kovo',\n    'balandžio',\n    'gegužės',\n    'birželio',\n    'liepos',\n    'rugpjūčio',\n    'rugsėjo',\n    'spalio',\n    'lapkričio',\n    'gruodžio',\n];\nexport const dateToWords = (date: Date) => {\n    return `${date.getFullYear()} m. ${monthWords[date.getMonth()]} ${format(\n        date,\n        'dd'\n    )} d.`;\n};\nexport const priceToWordsHelper = (priceNumber: number): string => {\n    var words = [];\n    words[0] = '';\n    words[1] = 'vienas ';\n    words[2] = 'du ';\n    words[3] = 'trys ';\n    words[4] = 'keturi ';\n    words[5] = 'penki ';\n    words[6] = 'šeši ';\n    words[7] = 'septyni ';\n    words[8] = 'aštuoni ';\n    words[9] = 'devyni ';\n    words[10] = 'dešimt ';\n    words[11] = 'vienuolika ';\n    words[12] = 'dvylika ';\n    words[13] = 'trylika ';\n    words[14] = 'keturiuolika ';\n    words[15] = 'penkiolika ';\n    words[16] = 'šešiolika ';\n    words[17] = 'septyniolika ';\n    words[18] = 'aštuoniolika ';\n    words[19] = 'devyniolika ';\n    words[20] = 'dvidešimt ';\n    words[30] = 'trisdešimt ';\n    words[40] = 'keturiasdešimt ';\n    words[50] = 'penkiasdešimt ';\n    words[60] = 'šešiasdešimt ';\n    words[70] = 'septyniasdešimt ';\n    words[80] = 'aštuoniasdešimt ';\n    words[90] = 'devyniasdešimt ';\n    words[100] = 'šimtas ';\n    words[101] = 'šimtai ';\n    words[1000] = 'tūkstantis ';\n    words[1001] = 'tūkstančiai ';\n    words[10000] = 'tūkstančių ';\n\n    let priceInWords = '';\n    const eurWord = priceNumber\n        ? priceNumber % 10 === 1 && priceNumber % 100 !== 11\n            ? 'euras'\n            : priceNumber % 10 !== 0 &&\n              (priceNumber % 100 < 10 || priceNumber % 100 > 20)\n            ? 'eurai'\n            : 'eurų'\n        : '';\n    let decimalNumberWord = '';\n    const decimalNumber = priceNumber % 100;\n\n    if (decimalNumber) {\n        if (decimalNumber >= 10 && decimalNumber <= 20) {\n            decimalNumberWord = words[decimalNumber];\n            priceNumber -= decimalNumber;\n        } else {\n            decimalNumberWord = words[decimalNumber - (decimalNumber % 10)];\n            priceNumber = priceNumber - decimalNumber + (decimalNumber % 10);\n        }\n    }\n\n    const lastNumber = priceNumber % 10;\n    let lastNumberWord = '';\n\n    if (lastNumber) {\n        lastNumberWord = words[priceNumber % 10];\n        priceNumber -= lastNumber;\n    }\n\n    let hundredNumberWord = '';\n    const hundredNumber = priceNumber % 1000;\n\n    if (hundredNumber) {\n        const hundredNumberFirstPosition = hundredNumber / 100;\n        if (hundredNumberFirstPosition === 1) {\n            hundredNumberWord = words[100];\n        } else {\n            hundredNumberWord = words[hundredNumberFirstPosition] + words[101];\n        }\n        priceNumber -= hundredNumber;\n    }\n\n    let tenThousandNumberWord = '';\n    const tenThousandNumber = priceNumber % 100000;\n\n    if (tenThousandNumber >= 10000) {\n        const tenThousandNumberFirstPosition = tenThousandNumber / 1000;\n        if (\n            tenThousandNumberFirstPosition >= 10 &&\n            tenThousandNumberFirstPosition <= 20\n        ) {\n            tenThousandNumberWord =\n                words[tenThousandNumberFirstPosition] + words[10000];\n            priceNumber -= tenThousandNumber;\n        } else {\n            const tempThousandNumber = (priceNumber % 10000) / 1000;\n            tenThousandNumberWord =\n                words[tenThousandNumberFirstPosition - tempThousandNumber];\n            if (!tempThousandNumber) {\n                tenThousandNumberWord += words[10000];\n            }\n            priceNumber =\n                priceNumber - tenThousandNumber + (priceNumber % 10000);\n        }\n    }\n    let thousandNumberWord = '';\n    const thousandNumber = priceNumber % 10000;\n\n    if (thousandNumber) {\n        const thousandNumberFirstPosition = thousandNumber / 1000;\n        if (thousandNumberFirstPosition === 1) {\n            if (tenThousandNumberWord) {\n                thousandNumberWord =\n                    words[thousandNumberFirstPosition] + words[1000];\n            } else {\n                thousandNumberWord = words[1000];\n            }\n        } else {\n            thousandNumberWord =\n                words[thousandNumberFirstPosition] + words[1001];\n        }\n        priceNumber -= thousandNumber;\n    }\n    priceInWords =\n        tenThousandNumberWord +\n        thousandNumberWord +\n        hundredNumberWord +\n        decimalNumberWord +\n        lastNumberWord +\n        eurWord;\n\n    return priceInWords;\n};\n","import React, { Component } from 'react';\nimport { FVEnum } from '../types';\nimport { dateToWords } from '../helpers';\nimport sanidentasLogo from '../sanidentas_logo.jpeg';\ninterface IProps {\n    formValues: {\n        [FVEnum.Order1]: number;\n        [FVEnum.Order2]: number;\n        [FVEnum.Invoice1]: number;\n        [FVEnum.Invoice2]: number;\n        [FVEnum.Eur]: string | null;\n        [FVEnum.Ct]: string | null;\n        [FVEnum.PriceInWords]: string;\n\n        [FVEnum.Name]: string;\n        [FVEnum.PersonalCode]: string | null;\n        [FVEnum.Address]: string;\n    };\n    date: Date;\n    pages: number;\n}\nexport class InvoicePage extends Component<IProps> {\n    render() {\n        const { formValues: fV, date, pages } = this.props;\n        const pagesNumber = new Array(pages).fill(0);\n        console.log(pagesNumber);\n        return <>{pagesNumber.map(() => this.invoice(fV, date))}</>;\n    }\n    invoice = (fV: any, date: Date) => (\n        <div\n            style={{\n                height: '100vh',\n                padding: '50px',\n                display: 'flex',\n                justifyContent: 'space-between',\n                flexDirection: 'column',\n                boxSizing: 'border-box',\n            }}\n        >\n            <div>\n                <img\n                    src={sanidentasLogo}\n                    style={{ width: 250 }}\n                    alt='sanidentas'\n                />\n                <div\n                    style={{\n                        width: '100%',\n                        display: 'flex',\n                        flexDirection: 'column',\n                        alignItems: 'center',\n                    }}\n                >\n                    <div\n                        style={{\n                            fontWeight: 'bold',\n                            fontSize: 18,\n                            marginBottom: 10,\n                        }}\n                    >\n                        SĄSKAITA FAKTŪRA\n                    </div>\n                    <div style={{ padding: '5px 0' }}>\n                        Serija SDS Nr. {fV[FVEnum.Invoice1]}-\n                        {fV[FVEnum.Invoice2]}\n                    </div>\n                    <div style={{ padding: '5px 0' }}>{dateToWords(date)}</div>\n                    <div style={{ padding: '5px 0' }}>Vilnius</div>\n                </div>\n                <div style={{ padding: '5px 0', fontWeight: 'bold' }}>\n                    Paslaugų teikėjas:\n                </div>\n                <div style={{ padding: '5px 0' }}>\n                    UAB \"Sanidentas\" įmonės kodas 3000994735\n                </div>\n                <div style={{ padding: '5px 0' }}>\n                    Duomenys kaupiami ir saugomi Juridinių asmenų registre\n                </div>\n                <div style={{ padding: '5px 0' }}>\n                    Karaliaučiaus g. 2-58, LT-06281 Vilnius\n                </div>\n                <div style={{ padding: '5px 0' }}>Tel. +370 671 02370</div>\n                <div style={{ padding: '5px 0' }}>\n                    El. p. info@sanidentas.lt www.sanidentas.lt\n                </div>\n                <div style={{ padding: '5px 0' }}>\n                    A. s. LT19 4010 0495 0122 7931 AB DNB banke, kodas 40100\n                </div>\n                <div\n                    style={{\n                        fontStyle: 'italic',\n                        fontWeight: 'bold',\n                        textAlign: 'center',\n                        padding: '20px 0',\n                    }}\n                >\n                    DĖMESIO, PASIKEITĖ BANKO SĄSKAITOS REKVIZITAI!\n                </div>\n\n                <div style={{ fontWeight: 'bold' }}>Paslaugų pirkėjas:</div>\n                <div style={{ padding: '5px 0' }}>{fV[FVEnum.Name]}</div>\n                <div style={{ padding: '5px 0' }}>\n                    Asmens (įmonės) kodas: {fV[FVEnum.PersonalCode]}\n                </div>\n                <div style={{ padding: '5px 0' }}>\n                    Adresas: {fV[FVEnum.Address]}\n                </div>\n\n                <table style={{ width: '100%', margin: '5px auto' }}>\n                    <thead style={{ fontWeight: 700 }}>\n                        <tr>\n                            <th>Paslaugos pavadinimas</th>\n                            <th style={{ textAlign: 'center' }}>Kiekis</th>\n                            <th style={{ textAlign: 'center' }}>Kaina, EUR</th>\n                            <th style={{ textAlign: 'center' }}>Suma, EUR</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>dantų gydymas</td>\n                            <td style={{ textAlign: 'center' }}>1</td>\n                            <td style={{ textAlign: 'center' }}>\n                                {fV[FVEnum.Eur]}.\n                                {fV[FVEnum.Ct] ? fV[FVEnum.Ct] : '00'}\n                            </td>\n                            <td style={{ textAlign: 'center' }}>\n                                {fV[FVEnum.Eur]}.\n                                {fV[FVEnum.Ct] ? fV[FVEnum.Ct] : '00'}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td\n                                colSpan={3}\n                                style={{\n                                    borderBottom: 'transparent',\n                                    borderLeft: 'transparent',\n                                    textAlign: 'right',\n                                    fontWeight: 'bold',\n                                }}\n                            >\n                                Iš viso EUR:\n                            </td>\n                            <td\n                                style={{\n                                    fontWeight: 'bold',\n                                    textAlign: 'center',\n                                }}\n                            >\n                                {fV[FVEnum.Eur]}.\n                                {fV[FVEnum.Ct] ? fV[FVEnum.Ct] : '00'}\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n                <div style={{ padding: '5px 0' }}>\n                    Suma žodžiais: {fV[FVEnum.PriceInWords]}.\n                </div>\n                <div style={{ display: 'flex', padding: '20px 0' }}>\n                    <span>Sąskaita išrašė </span>\n                    <div style={{ flex: 1, borderBottom: '1px solid' }} />\n                </div>\n                <div style={{ display: 'flex', padding: '20px 0' }}>\n                    <span>Sąskaita už suteiktas paslaugas gavau </span>\n                    <div style={{ flex: 1, borderBottom: '1px solid' }} />\n                </div>\n            </div>\n            <div\n                style={{\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                    fontSize: 10,\n                }}\n            >\n                <div style={{ padding: '5px 0' }}>UAB \"SANIDENTAS\"</div>\n                <div style={{ padding: '5px 0' }}>ODONTOLOGIJOS KLINIKA</div>\n            </div>\n        </div>\n    );\n}\n\nexport default InvoicePage;\n","import React, { Component } from 'react';\nimport { FVEnum } from '../types';\nimport { dateToWords } from '../helpers';\ninterface IProps {\n    formValues: {\n        [FVEnum.Order1]: number;\n        [FVEnum.Order2]: number;\n        [FVEnum.Invoice1]: number;\n        [FVEnum.Invoice2]: number;\n        [FVEnum.Eur]: string | null;\n        [FVEnum.Ct]: string | null;\n        [FVEnum.PriceInWords]: string;\n\n        [FVEnum.Name]: string;\n        [FVEnum.PersonalCode]: string | null;\n        [FVEnum.Address]: string;\n    };\n    date: Date;\n}\nexport class OrderPage extends Component<IProps> {\n    render() {\n        const { formValues: fV, date } = this.props;\n        return (\n            <div style={{ padding: '50px 80px' }}>\n                {this.order(fV, date)}\n                <div\n                    style={{\n                        width: '100%',\n                        borderBottom: '1px dashed',\n                        margin: '50px 0 30px',\n                    }}\n                />\n                {this.order(fV, date)}\n            </div>\n        );\n    }\n    order = (fV: any, date: Date) => (\n        <>\n            <div\n                style={{\n                    width: '100%',\n                    display: 'flex',\n                    flexDirection: 'column',\n                    textAlign: 'right',\n                    fontSize: 12,\n                    boxSizing: 'border-box',\n                }}\n            >\n                <div>UAB \"Sanidentas\"</div>\n                <div>Karaliaučiaus g. 2-58, LT-06281 Vilnius</div>\n                <div>įmonės kodas 3000994735</div>\n                <div>A/S LT19 4010 0495 0122 7931</div>\n            </div>\n\n            <div\n                style={{\n                    width: '100%',\n                    display: 'flex',\n                    flexDirection: 'column',\n                    alignItems: 'center',\n                    margin: '15px 0',\n                }}\n            >\n                <div style={{ fontSize: 15 }}>\n                    KASOS PAJAMŲ ORDERIS Serija SD Nr. {fV[FVEnum.Order1]}-\n                    {fV[FVEnum.Order2]}\n                </div>\n                <div style={{ padding: '5px 0' }}>{dateToWords(date)}</div>\n            </div>\n            <div style={{ padding: '5px 0' }}>Mokėtojas: {fV[FVEnum.Name]}</div>\n            <div style={{ padding: '5px 0' }}>\n                Asmens (įmonės) kodas: {fV[FVEnum.PersonalCode]}\n            </div>\n            <div style={{ padding: '5px 0' }}>\n                Adresas: {fV[FVEnum.Address]}\n            </div>\n            <div style={{ padding: '20px 0' }}>\n                Operacijos turinys: dantų gydymas\n            </div>\n            <div style={{ padding: '5px 0' }}>\n                Suma: {fV[FVEnum.Eur]} {fV[FVEnum.Ct] ? fV[FVEnum.Ct] : '00'}\n            </div>\n            <div style={{ padding: '5px 0' }}>\n                Suma žodžiais:{' '}\n                <span style={{ fontStyle: 'italic' }}>\n                    {fV[FVEnum.PriceInWords]}.\n                </span>\n            </div>\n            <div style={{ display: 'flex', padding: '15px 0' }}>\n                <span>Vyr. Buhalteris (buhalteris)</span>\n                <div style={{ flex: 1, borderBottom: '1px solid' }} />\n            </div>\n            <div style={{ display: 'flex', padding: '15px 0' }}>\n                <span>Gavo</span>\n                <div style={{ flex: 1, borderBottom: '1px solid' }} />\n            </div>\n        </>\n    );\n}\n\nexport default OrderPage;\n","import React, { useState, useEffect, useRef } from 'react';\nimport format from 'date-fns/format';\nimport ReactToPrint from 'react-to-print';\nimport InvoicePage from './InvoicePage';\nimport { priceToWordsHelper, getLocal, setLocal } from '../helpers';\nimport { FVEnum } from '../types';\nimport OrderPage from './OrderPage';\n\ninterface IProps {\n    date: Date;\n    toggleCalendar(): void;\n}\n\nexport const MainForm = ({ date, toggleCalendar }: IProps) => {\n    const invoiceRef: any = useRef(null);\n    const doubleInvoiceRef: any = useRef(null);\n    const orderRef: any = useRef(null);\n\n    const [formValues, setFormValue] = useState(() => {\n        const initialNumberObject = {\n            [FVEnum.Order1]: 0,\n            [FVEnum.Order2]: 0,\n            [FVEnum.Invoice1]: 0,\n            [FVEnum.Invoice2]: 0,\n        };\n        const savedNumbersObject = getLocal();\n        let numbers;\n        if (savedNumbersObject) {\n            numbers = savedNumbersObject;\n        } else {\n            numbers = initialNumberObject;\n        }\n        return {\n            ...numbers,\n            [FVEnum.Eur]: null,\n            [FVEnum.Ct]: null,\n            [FVEnum.PriceInWords]: '',\n\n            [FVEnum.Name]: '',\n            [FVEnum.PersonalCode]: null,\n            [FVEnum.Address]: '',\n        };\n    });\n    const setValue = (e: any) => {\n        const { name, value } = e.target;\n        if (name) {\n            setFormValue({ ...formValues, [name]: value });\n        }\n    };\n    useEffect(() => {\n        setLocal({\n            [FVEnum.Order1]: formValues[FVEnum.Order1],\n            [FVEnum.Order2]: formValues[FVEnum.Order2],\n            [FVEnum.Invoice1]: formValues[FVEnum.Invoice1],\n            [FVEnum.Invoice2]: formValues[FVEnum.Invoice2],\n        });\n    }, [\n        formValues[FVEnum.Order1],\n        formValues[FVEnum.Order2],\n        formValues[FVEnum.Invoice1],\n        formValues[FVEnum.Invoice2],\n    ]);\n\n    useEffect(() => {\n        setFormValue({\n            ...formValues,\n            [FVEnum.PriceInWords]: `${priceToWordsHelper(\n                Number(formValues[FVEnum.Eur])\n            )} ${formValues[FVEnum.Ct] ? formValues[FVEnum.Ct] : 0} ct`,\n        });\n    }, [formValues[FVEnum.Eur], formValues[FVEnum.Ct]]);\n    const incrementInvoice = () => {\n        setFormValue({\n            ...formValues,\n            [FVEnum.Invoice2]: Number(formValues[FVEnum.Invoice2]) + 1,\n        });\n    };\n    const incrementOrder = () => {\n        setFormValue({\n            ...formValues,\n            [FVEnum.Order2]: Number(formValues[FVEnum.Order2]) + 1,\n        });\n    };\n    return (\n        <div className='main-form'>\n            <div className='form-inner'>\n                <div className='form-column'>\n                    <div className='field'>\n                        <label htmlFor='date'>Data</label>\n                        <input\n                            placeholder='Data'\n                            id='date'\n                            readOnly\n                            onClick={toggleCalendar}\n                            value={format(date, 'yyyy-MM-dd')}\n                        />\n                    </div>\n\n                    <div className='field'>\n                        <label htmlFor='SDS2'>Sąskaita (SDS)</label>\n                        <div className='double-input'>\n                            <input\n                                id='SDS1'\n                                className='left-db-input'\n                                type='number'\n                                name={FVEnum.Invoice1}\n                                value={formValues.invoice1}\n                                onChange={setValue}\n                                placeholder='Sąskaita'\n                            />\n\n                            <input\n                                id='SDS2'\n                                type='number'\n                                className='right-db-input'\n                                name={FVEnum.Invoice2}\n                                value={formValues.invoice2}\n                                onChange={setValue}\n                                placeholder='Sąskaita'\n                            />\n                        </div>\n                    </div>\n                    <div className='field'>\n                        <label htmlFor={FVEnum.Order2}>Orderis (SD)</label>\n                        <div className='double-input'>\n                            <input\n                                className='left-db-input'\n                                type='number'\n                                name={FVEnum.Order1}\n                                value={formValues.order1}\n                                onChange={setValue}\n                                placeholder='Orderis'\n                            />\n\n                            <input\n                                className='right-db-input'\n                                type='number'\n                                id={FVEnum.Order2}\n                                name={FVEnum.Order2}\n                                value={formValues.order2}\n                                onChange={setValue}\n                                placeholder='Orderis'\n                            />\n                        </div>\n                    </div>\n\n                    <div className='field'>\n                        <label htmlFor={FVEnum.Eur}>Suma</label>\n                        <div className='double-input price'>\n                            <input\n                                className='eur'\n                                type='number'\n                                id={FVEnum.Eur}\n                                name={FVEnum.Eur}\n                                value={formValues[FVEnum.Eur]}\n                                onChange={setValue}\n                                placeholder='Eurai'\n                            />\n\n                            <input\n                                className='ct'\n                                type='number'\n                                name={FVEnum.Ct}\n                                value={formValues[FVEnum.Ct]}\n                                onChange={setValue}\n                                placeholder='Centai'\n                            />\n                        </div>\n                    </div>\n                </div>\n                <div className='form-column'>\n                    <div className='field'>\n                        <label htmlFor={FVEnum.Name}>Vardas Pavardė</label>\n                        <input\n                            id={FVEnum.Name}\n                            name={FVEnum.Name}\n                            value={formValues.name}\n                            onChange={setValue}\n                            placeholder='Vardas Pavardė'\n                        />\n                    </div>\n\n                    <div className='field'>\n                        <label htmlFor={FVEnum.PersonalCode}>\n                            Asmens (įmonės) kodas\n                        </label>\n                        <input\n                            type='number'\n                            id={FVEnum.PersonalCode}\n                            name={FVEnum.PersonalCode}\n                            value={formValues.personalCode}\n                            onChange={setValue}\n                            placeholder='Asmens (įmonės) kodas'\n                        />\n                    </div>\n                    <div className='field'>\n                        <label htmlFor={FVEnum.Address}>Adresas</label>\n                        <input\n                            type='text'\n                            id={FVEnum.Address}\n                            name={FVEnum.Address}\n                            value={formValues.address}\n                            onChange={setValue}\n                            placeholder='Adresas'\n                        />\n                    </div>\n                    <div className='field'>\n                        <label htmlFor='sumaZodziais'>Suma žodžiais</label>\n                        <input\n                            id='sumaZodziais'\n                            placeholder='Suma žodžiais'\n                            value={\n                                Boolean(formValues[FVEnum.Eur]) ||\n                                Boolean(formValues[FVEnum.Ct])\n                                    ? formValues.eurInWords\n                                    : ''\n                            }\n                        />\n                    </div>\n                </div>\n            </div>\n\n            <div className='buttons-container'>\n                <button\n                    className='btn secondary'\n                    onClick={() => window.location.reload()}\n                >\n                    Išvalyti formą\n                </button>\n\n                <ReactToPrint\n                    onAfterPrint={incrementInvoice}\n                    trigger={() => (\n                        <button className='btn primary'>\n                            Spausdinti sąskaita faktūra\n                        </button>\n                    )}\n                    content={() => invoiceRef && invoiceRef.current}\n                />\n                <ReactToPrint\n                    onAfterPrint={incrementInvoice}\n                    trigger={() => (\n                        <button className='btn primary'>\n                            Spausdinti 2 sąskaitas faktūras\n                        </button>\n                    )}\n                    content={() => doubleInvoiceRef && doubleInvoiceRef.current}\n                />\n                <ReactToPrint\n                    onAfterPrint={incrementOrder}\n                    trigger={() => (\n                        <button className='btn primary'>Spausdinti KPO</button>\n                    )}\n                    content={() => orderRef && orderRef.current}\n                />\n            </div>\n            <div style={{ display: 'none' }}>\n                <div ref={orderRef}>\n                    <OrderPage formValues={formValues} date={date} />\n                </div>\n                <div ref={doubleInvoiceRef}>\n                    <InvoicePage\n                        formValues={formValues}\n                        date={date}\n                        pages={2}\n                    />\n                </div>\n                <div ref={invoiceRef}>\n                    <InvoicePage\n                        formValues={formValues}\n                        date={date}\n                        pages={1}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n};\nexport default MainForm;\n","import React from \"react\";\nimport Calendar from \"react-calendar\";\ninterface IProps {\n  date: Date;\n  toggleCalendar(): void;\n  setDate: (newDate: Date) => void;\n}\nexport const CalendarModal = ({ setDate, date, toggleCalendar }: IProps) => {\n  return (\n    <div className=\"calendar-modal\">\n      <div className=\"calendar-backdrop\" onClick={toggleCalendar} />\n      <Calendar\n        className=\"calendar\"\n        locale=\"lt\"\n        selectRange={false}\n        onChange={newDate => {\n          if (Array.isArray(newDate) && newDate.length) {\n            setDate(newDate[0]);\n          } else if (newDate instanceof Date) {\n            setDate(newDate);\n          }\n        }}\n        value={date}\n      />\n    </div>\n  );\n};\n\nexport default CalendarModal;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport MainForm from \"./components/MainForm\";\nimport CalendarModal from \"./components/CalendarModal\";\nimport Logo from \"./Sanidentas_logotipas.svg\";\nfunction App() {\n    const [date, setDate] = useState(new Date());\n\n    const [isCalendarModalVisible, setCalendarModalVisible] = useState(false);\n    const toggleCalendar = () =>\n        setCalendarModalVisible(!isCalendarModalVisible);\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={Logo} alt=\"sanidentas\" style={{ width: 150 }} />\n            </header>\n            <MainForm date={date} toggleCalendar={toggleCalendar} />\n            {isCalendarModalVisible && (\n                <CalendarModal\n                    setDate={setDate}\n                    date={date}\n                    toggleCalendar={toggleCalendar}\n                />\n            )}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}